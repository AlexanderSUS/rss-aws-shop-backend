openapi: 3.0.0
info:
  title: Products API
  version: 0.1.9
servers:
  # TODO change URL
  - url: http://api.example.com/
paths:
  /products:
    get:
      summary: Returns a list of products.
      tags: 
        - products
      description: Optional extended description in CommonMark or HTML.
      responses:
        '200':    # status code
          description: "OK"
          content:
            application/json:
              schema: 
                type: array 
                items:
                  $ref: '#/components/schemas/availableProduct'
        '500':
          description: Internal server error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: Internal server error
    post:
      summary: Create product 
      tags: 
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createProductPayload' 
      responses: 
        '201':
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string 
              example:
                message: Success
        '400':
          description: Bad request 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: Invalid product id 
        '500':
          description: Internal server error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: Internal server error 
  /products/{productId}:
    get:
      summary: Returns a product by ID.
      tags: 
        - products
      parameters:
        - name: productId 
          in: path
          required: true
          schema:
            type : string 
            format: uuid 
          example:
            "6c81a41b-c4b5-46a8-9615-9b4fe9ddfa01"
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/availableProduct'
        '400':
          description: Bad request 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: Invalid product id 
        '404':
          description: Product not found 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: Product not found 
        '500':
          description: Internal server error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: Internal server error 
components:
  schemas:
    availableProduct:
      properties:
        id: 
          type: string
          format: uuid
          description: Product id
          example: 6c81a41b-c4b5-46a8-9615-9b4fe9ddfa01
        title:
          type: string
          description: Product title
          example: Product 1 title
        price:
          type: number
          description: Product price
          example: 100
        description:
          type: string
          description: product description
          example: Product 1 description
        count:
          type: number
          description: available products in stock
          example: 2
    createProductPayload:
      properties:
        title:
          type: string
          description: Product title
          example: Product 1 title
        price:
          type: number
          description: Product price
          example: 100
        description:
          type: string
          description: product description
          example: Product 1 description
        count:
          type: number
          description: available products in stock
          example: 2